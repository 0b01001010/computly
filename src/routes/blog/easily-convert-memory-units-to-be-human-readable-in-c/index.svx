---
title: Easily convert memory units to be human readable in C
date: 2018-10-19
description: Learn how to write a small C program that converts memory units to be human readable.
---
<script context="module">
export const load = async () => {
  return {
    props: {
      mainImage: (await import('./_info.json')).default,
    }
  }
}
</script>

## Why

Sometimes you may need to convert a large number of bytes that was produced by your program into the appropriate human readable format. For example 297719372 bytes. For human eyes, it is easier to understand 298MB.

Here's a quick code snippet for you, in case you want to convert your data to human readable format. We'll do this in C, but you can understand the algorithm and convert it to your preferred language:

## How
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 609 459"><path fill="#fff" d="M523 341v53H86V64h437v277Z"/><path fill="#f2f2f2" d="M86 394v1h437v-1Zm0-330v1h437v-1Z"/><path fill="#f2f2f2" d="M467 358h2-2Zm-7 5 1-1a14 14 0 0 1 5-3 5 5 0 0 1 0-1h1l-13 5ZM0 63l3 52 606-50v-2Zm609 278v54H0v-2l36-53 236 53a559 559 0 0 0 144-18 123 123 0 0 0 15-5l23-7 12-5a1 1 0 0 1 1 0h2l2-1a467 467 0 0 0 28-12l14-7 17-10q18-10 33-21a361 361 0 0 0 32-25l11-11 3-3v73Z"/><path fill="#f2f2f2" d="M170 337H86v5h84a2 2 0 0 0 0-5Zm0-16H86v5h84a2 2 0 0 0 0-5Zm1-16a2 2 0 0 0-1 0H86v5h84a2 2 0 0 0 2-1 2 2 0 0 0-1-4Z"/><path fill="#e6e6e6" d="m201 299-7-33-3-11a3 3 0 0 0-4-2l-3 1-30 6a3 3 0 0 0-2 4 70 70 0 0 0 9 44 3 3 0 0 0 1 2 3 3 0 0 0 4 1l3-1 3-1 27-6a3 3 0 0 0 2-4Z"/><path fill="#fff" d="m198 297-7-31-2-8a3 3 0 0 0-3-2h-3l-26 6a3 3 0 0 0-2 4c0 12 1 22 6 28a14 14 0 0 0 10 11 14 14 0 0 0 7 0l18-4a3 3 0 0 0 2-4Z"/><path fill="#040404" d="M172 273a4 4 0 0 1 5-1 4 4 0 0 1 2 4l-1 6a5 5 0 0 0 2 5c1 1 2-1 1-2-2-1-1-3-1-5 1-2 2-5 1-7a6 6 0 0 0-10-2c-1 1 0 3 1 2Z"/><circle cx="181.5" cy="291.2" r="2.1" fill="#040404"/><path fill="#a0616a" d="M437 210a16 16 0 0 0-25 9l-30 78-51-29a16 16 0 1 0-10 16c11 11 58 59 77 40 16-15 40-76 46-96a16 16 0 0 0-7-18Z"/><path fill="#a0616a" d="m381 327 9 43 69 6 6-37-84-12z"/><path fill="#2f2e41" d="M477 394h-98l5-15 2-23h1l75 1h2l2 20a86 86 0 0 1 11 17Z"/><path fill="#3f3d56" d="m424 189 34-2 16 26s15 3 13 38-22 68-22 68l2-5-3 7 1 4 3 5v4l-3 7 4 7-88-8-3-12 5-6-3-9 4-8 2-1s-22-34 4-60l10-17 12-14Zm-113 50c-9-4-21-2-27 6-6 7-7 18 0 25 9 8 22 5 32 0 9-4 19-10 19-21a18 18 0 0 0-8-15 18 18 0 0 0-16-2c-3 1-2 5 1 4a14 14 0 0 1 19 11c1 9-7 15-14 19-8 4-19 7-27 3-7-4-9-13-5-20 5-8 17-10 25-7 3 1 4-2 1-3Z"/><path fill="#f2f2f2" d="M134 162c-7-3-15-2-20 4-4 5-5 13 1 18 6 6 15 4 22 0 7-2 14-7 14-15a13 13 0 0 0-6-11 13 13 0 0 0-11-1c-2 1-1 3 0 3a10 10 0 0 1 14 8c1 6-5 10-10 13-6 3-13 6-19 2-6-2-7-9-4-14 4-6 12-7 18-5 2 1 3-2 1-2Z"/><ellipse cx="507.2" cy="389.5" fill="#f2f2f2" rx="18" ry="12.2" transform="rotate(-15 -467 1385)"/><path fill="#f2f2f2" d="M170 158v22a2 2 0 0 0 3 0v-22a2 2 0 0 0-3 0Z"/><path fill="#f2f2f2" d="M160 170h22a2 2 0 0 0 0-3h-22a2 2 0 0 0 0 3Zm-73 11a1 1 0 0 1-1 1v-3a2 2 0 0 1 1 2Z"/><circle cx="92.3" cy="180.8" r="2" fill="#f2f2f2"/><path fill="#fff" d="M159 363c-3 0-6 2-6 5s3 6 6 6h364v-11Z"/><path fill="#040404" d="M436 363v11H159c-3 0-6-3-6-6s3-5 6-5Z"/><circle cx="426.1" cy="368" r="11" fill="#040404"/><path fill="#fff" d="M147 206H86v4h61a2 2 0 0 0 0-4Z"/><path fill="#f2f2f2" d="M299 169c2-5 9-7 13-3l8 6c3 1 6-1 9-2a15 15 0 0 1 5-2 12 12 0 0 1 5 0l10 4a27 27 0 0 0 11 2h29a93 93 0 0 0 14-2c2 0 2-3 0-3a85 85 0 0 1-14 2h-28a27 27 0 0 1-6 0 28 28 0 0 1-5-2l-10-4a14 14 0 0 0-11 1c-2 2-6 5-9 3l-7-6c-6-4-15-1-17 5-1 2 2 3 3 1Zm8 24c2-3 4-7 8-8a6 6 0 0 1 5 1l4 3c3 2 6 2 9 1 2-2 5-4 8-3l6 3a7 7 0 0 0 6 0 2 2 0 0 0-2-2c-1 1-3-1-5-2a14 14 0 0 0-5-2c-3-1-6 1-9 3a7 7 0 0 1-4 1c-2 0-3-2-4-3a11 11 0 0 0-5-3 10 10 0 0 0-5 1c-5 1-7 5-10 9-1 1 2 3 3 1Zm-38-33a3 3 0 0 1-4-4c1-2 5-1 6 0 1 3 1 6-1 8l-8 5a2 2 0 0 0 1 3l11 2c2 1 2-2 1-3l-11-2v3l8-6a9 9 0 0 0 2-9 7 7 0 0 0-7-5 5 5 0 0 0-5 7c1 3 6 5 9 3 2-1 0-3-2-2Z"/><circle cx="279.8" cy="173.3" r="2" fill="#f2f2f2"/><path fill="#f2f2f2" d="M329 206h-67a2 2 0 1 0 0 4h67a2 2 0 0 0 0-4Z"/><path fill="#3f3d56" d="M280 253h-81a1 1 0 1 1 0-2h81a1 1 0 0 1 0 2Z"/><circle cx="193.3" cy="256.1" r="10" fill="#040404"/><path fill="#fff" d="M129 111c-1 2-4 4-7 5l-28 14 1 1v1l-7 10-2 2V89l2-1 19-8 10-2c7 1 11 9 13 16 1 6 3 12-1 17Z"/><path fill="#ccc" d="m96 132-8 11-2 3v-3l2-3 7-9c1-1 2 0 1 1Z"/><path fill="#ccc" d="m131 110-7 6-10 5-19 10h-1v-4c3-6 16-6 23-9l4-2a40 40 0 0 0 4-3 11 11 0 0 0 5-6 18 18 0 0 0 0-8 58 58 0 0 0-2-8c-2-5-5-11-10-12-3-1-6 0-8 1l-9 3-13 6-2 1v-2l2-1 16-7a44 44 0 0 1 9-3 12 12 0 0 1 8 2 17 17 0 0 1 6 6 45 45 0 0 1 3 9c2 5 3 11 1 16Z"/><path fill="#040404" d="M94 98a6 6 0 0 0-7 3 6 6 0 0 0 3 7l10 5 5-11a6 6 0 0 0-3-7 6 6 0 0 0-8 3Z"/><path fill="#a0616a" d="M523 302a171 171 0 0 0-10-20c-8-15-18-30-26-40l-8-11a16 16 0 1 0-25 21l25 37 11 18 10 14-33 15-5 3-15 7h-1a16 16 0 0 0-2-1 16 16 0 0 0-7-1 16 16 0 0 0-4 0 16 16 0 0 0-11 13v1a16 16 0 0 0 9 16h1a15 15 0 0 0 3 1 16 16 0 0 0 4 0 16 16 0 0 0 4 0 16 16 0 0 0 2-1 16 16 0 0 0 9-11 162 162 0 0 0 10-1 154 154 0 0 0 59-21Z"/><path fill="#3f3d56" d="M495 0H114a28 28 0 0 0-28 28v403a28 28 0 0 0 28 28h381a28 28 0 0 0 28-28V28a28 28 0 0 0-28-28Zm26 431a26 26 0 0 1-26 26H114a26 26 0 0 1-26-26V28a26 26 0 0 1 26-26h381a26 26 0 0 1 26 26ZM86 65v328h2V65Z"/><circle cx="122.1" cy="367" r="16" fill="#040404"/><path fill="#fff" d="M120 376a1 1 0 0 1-1 0 1 1 0 0 1 0-1v-15a1 1 0 0 1 1-1l8 7a1 1 0 0 1 0 2l-8 7a1 1 0 0 1 0 1Z"/><circle cx="448.2" cy="111" r="18" fill="#2f2e41"/><path fill="#2f2e41" d="M448 137c-8-5-11-16-5-25a18 18 0 0 1 25-5c8 5 2 15 5 24 5 14-13 13-25 6Zm-41-5-21 2c-7 10 18 53 11 63l-1 1a45 45 0 0 0 6-4l1-12a34 34 0 0 1 5 9c1-1 2-4 9-8a43 43 0 0 1 10-7Z"/><circle cx="416.1" cy="146.9" r="31.9" fill="#a0616a"/><path fill="#2f2e41" d="M440 193a15 15 0 0 1-5-9 33 33 0 0 0 1 13l-5 3a34 34 0 0 0-5-8l-1 12a45 45 0 0 1-6 4l1-2c7-10-11-28-4-38 2-3-7-25-13-26s-6 1-12 2a28 28 0 0 0-2-7 23 23 0 0 1-1 7l-5-1c-14-2-13-17-9-22s17-6 22-7l3-1c11-10 26-12 39-8 15 5 24 15 28 29l2 12c1 3-1 21-2 25-4 14-12 7-26 22Z"/></svg>

### First, we need to import these header files.


```c
#include <stdio.h> 
#include <stdlib.h> // atoll
#include <stdint.h> // uint64_t
#include <inttypes.h> // PRIu64
```

### So what are those header files?

Header files are used to import the functions and variables that you can use in your program.

  - `stdio.h` is used to import the functions that are used to read and write data to the console.
  - `stdlib.h` is used to import the functions for general purposes.
  - `stdint.h` defines integer types, limits of specified width integer types, limits of other integer types and macros for integer constant expressions.
  - `inttypes.h` defines macros for printing integers in format that is suitable for the given width.

### Now we need to define the conversion function.

```c
static const char *human_size(uint64_t bytes_to_convert)
{
	// This function takes an integer as argument and returns a string.
}
```

Lets add the memory units.

```c
static const char *human_size(uint64_t bytes_to_convert)
{
	char *suffix[] = {"B", "KB", "MB", "GB", "TB"};
}
```

We need to calculate the length of the suffix array.
In this case it is 5, but we'll leave it this way so you can add more suffixes.

```c
static const char *human_size(uint64_t bytes_to_convert)
{
	char *suffix[] = {"B", "KB", "MB", "GB", "TB"};
	char length = sizeof(suffix) / sizeof(suffix[0]);
}
```

Now we need to make a loop to calculate the appropriate size.

```c
static const char *human_size(uint64_t bytes_to_convert)
{
	char *suffix[] = {"B", "KB", "MB", "GB", "TB"};
	char length = sizeof(suffix) / sizeof(suffix[0]);

	int i = 0;
	double dblBytes = bytes_to_convert;

	if (bytes_to_convert > 1024) {
		for (i = 0; (bytes_to_convert / 1024) > 0 && i<length-1; i++, bytes_to_convert /= 1024)
			dblBytes = bytes_to_convert / 1024.0;
	}
}
```

Finally, we output the result.

```c
static const char *human_size(uint64_t bytes_to_convert)
{
	char *suffix[] = {"B", "KB", "MB", "GB", "TB"};
	char length = sizeof(suffix) / sizeof(suffix[0]);

	int i = 0;
	double dblBytes = bytes_to_convert;

	if (bytes_to_convert > 1024) {
		for (i = 0; (bytes_to_convert / 1024) > 0 && i<length-1; i++, bytes_to_convert /= 1024)
			dblBytes = bytes_to_convert / 1024.0;
	}

	static char output[200];
	sprintf(output, "%.02lf %s", dblBytes, suffix[i]);
	return output;
}
```

### Here we need to define the `main` function.

The `main()` function is the first thing gets called when you execute your program.

Here we want to check user command line arguments for the number of bytes to convert.
If the user didn't provide any arguments, it'll return an error.

```c
int main(int argc, char **argv)
{
	if (argc == 1) {
		fprintf(stderr, "Usage: %s <bytes>\n", *argv);
		return 1;
	}

	uint64_t bytes = atoll(argv[1]);

	printf("%" PRIu64 " Bytes: %s\n", bytes, human_size(bytes));

	return 0;
}
```
Now we need to convert the command line arguments to a number using the `atoll` function which converts string to an integer.

```c
int main(int argc, char **argv)
{
	if (argc == 1) {
		fprintf(stderr, "Usage: %s <bytes>\n", *argv);
		return 1;
	}

	uint64_t bytes = atoll(argv[1]);

	printf("%" PRIu64 " Bytes: %s\n", bytes, human_size(bytes));

	return 0;
}
```
Finally, we call the `human_size` function to convert the number of bytes to human readable format.

```c
int main(int argc, char **argv)
{
	if (argc == 1) {
		fprintf(stderr, "Usage: %s <bytes>\n", *argv);
		return 1;
	}

	uint64_t bytes = atoll(argv[1]);

	printf("%" PRIu64 " Bytes: %s\n", bytes, human_size(bytes));

	return 0;
}
```

### Now the full program will look like this:

<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 846 704"><g data-name="Group 2"><path fill="#feb8b8" d="m704 665-2 19-30-9 13-15Z" data-name="Path 4"/><path fill="#feb8b8" d="m812 658-2 19-16 3-10-9 11-18Z" data-name="Path 5"/><path fill="#2f2e41" d="M824 415s13 16-3 40-37 47-37 47l-37 71s-19 68-23 70-7-6-5 3 1 8-1 8-7 0-5 3 3 3-1 3-5-2-5 1l-3 12s-24-7-25-10 6-5 5-8-2-2-2-7 3-5 3-5 2-1 1-3-5-1 0-4 25-77 25-77 0-37 6-49 2-99 17-100 90 5 90 5Z" data-name="Path 6"/><path fill="#2f2e41" d="m819 443-3 76s15 73 10 95-1 20-4 24-6 2-3 5 4 5 0 9-6 13-6 13l-25-3s6-11 4-13-9 1-4-4 8-3 5-6-7-1-4-5 9-4 5-5-8 0-6-3l4-7-6-44s-7-15-5-21-8-59-8-59Z" data-name="Path 7"/><path fill="#2f2e41" d="M809 668s4-5 6-2 12 30 6 31-16 4-21 3-15-8-27-8-23-6-23-8-2-13 8-13 26-11 26-11 4-8 6-7 0 16 0 16 12 10 19-1Z" data-name="Path 8"/><path fill="#2f2e41" d="M700 675s5-11 9-9 1 33 1 33-3 6-15 5-41-5-48-4-25-6-20-18c0 0 2-6 14-6s33-13 33-13 4-10 5-9l2 18s12 8 19 3Z" data-name="Path 9"/><circle cx="764.1" cy="196.2" r="28.3" fill="#feb8b8" data-name="Ellipse 2"/><path fill="#feb8b8" d="M786 198s15 30 21 33-37 21-37 21-7-29-15-36 31-18 31-18Z" data-name="Path 10"/><path fill="#feb8b8" d="m743 446-2 18s-21-7-14-21Z" data-name="Path 11"/><path fill="#f0f0f0" d="M734 418c15 15 93 2 93 2l-1-11 9-10-3-48s9-23 11-57a31 31 0 0 0-1-6c-5-31-55-50-56-50l-16 8-18 10c-11 4-9 74-13 81s0 28 0 28l-5 21s-14 16 0 32Z" data-name="Path 12"/><path d="M959 361s13 41 11 69-35 107-35 107l-11 6v14l-7-21 20-43s-26-150 22-132Z" data-name="Path 13" opacity=".1" style="isolation:isolate" transform="translate(-177 -98)"/><path d="M946 349c14-8 36 12 58 34 8 8 13 7 15 3-5-31-54-50-56-50l-15 8Z" data-name="Path 14" opacity=".1" style="isolation:isolate" transform="translate(-177 -98)"/><path fill="#f0f0f0" d="m769 247 6-16s40-19 66 0l4 27s4 45-18 23-44-42-58-34Z" data-name="Path 15"/><path fill="#f0f0f0" d="M780 256s14 41 11 69-35 107-35 107l-10 6v14l-23-6 5-16s-8-10-2-13 4-19 4-19 3-160 50-142Z" data-name="Path 16"/><path fill="#2f2e41" d="m789 208-1-6c-2-3-5-5-9-5h-12c-4 0-9-2-11-6l-3-4c-2-3-6-2-10-1s-7 3-10 2c-3-8 1-18 7-24s14-9 22-11c11-3 24-5 34 0 14 8 19 28 18 43-1 6-1 13-6 17-7 5-17 5-19-5Z" data-name="Path 17"/><path fill="#e6e6e6" d="M0 0h612v392H0z" data-name="Rectangle 1"/><path fill="#fff" d="M20 50h577v319H20z" data-name="Rectangle 2"/><path fill="#040404" d="M0 0h612v26H0z" data-name="Rectangle 3"/><circle cx="19.3" cy="13.3" r="4.8" fill="#fff" data-name="Ellipse 3"/><circle cx="37.6" cy="13.3" r="4.8" fill="#fff" data-name="Ellipse 4"/><circle cx="55.9" cy="13.3" r="4.8" fill="#fff" data-name="Ellipse 5"/><path fill="#040404" d="m121 94-39 38 39 38 8-9-29-29 29-29Z" data-name="Path 37"/><path fill="#040404" d="m152 94 38 38-38 38-9-9 29-29-29-29Z" data-name="Path 38"/><path fill="#e6e6e6" d="M275 104c-3 0-5 1-5 4s2 4 5 4h266c4 0 6-2 6-4s-2-4-6-4Z" data-name="Path 65"/><path fill="#e6e6e6" d="M539 323H91c-5 0-8-2-8-6v-79c0-3 3-6 8-6h448c4 0 8 3 8 6v79c0 4-4 6-8 6ZM91 235c-3 0-5 1-5 3v79c0 2 2 4 5 4h448c3 0 5-2 5-4v-79c0-2-2-3-5-3Z" data-name="Path 78"/><circle cx="137" cy="277.7" r="20" fill="#e6e6e6" data-name="Ellipse 13"/><path fill="#040404" d="M194 262a4 4 0 0 0 0 8h188a4 4 0 0 0 0-8Z" data-name="Path 79"/><path fill="#040404" d="M194 286a4 4 0 0 0 0 8h81a4 4 0 0 0 0-8h-81Z" data-name="Path 80"/><path fill="#e6e6e6" d="M273 128a4 4 0 0 0 0 8h175a4 4 0 0 0 0-8Z" data-name="Path 81"/><path fill="#e6e6e6" d="M274 152c-2 0-4 1-4 4s2 4 4 4h229c3 0 5-2 5-4s-2-4-5-4Z" data-name="Path 82"/></g></svg>

```c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>

static const char *human_size(uint64_t bytes_to_convert)
{
  char *suffix[] = {"B", "KB", "MB", "GB", "TB"};
  char length = sizeof(suffix) / sizeof(suffix[0]);

  printf("%d\n", length);

  int i = 0;
  double double_bytes = bytes_to_convert;

  if (bytes_to_convert > 1024)
  {
    for (i = 0; (bytes_to_convert / 1024) > 0 && i < length - 1; i++, bytes_to_convert /= 1024)
      double_bytes = bytes_to_convert / 1024.0;
  }

  static char output[200];
  sprintf(output, "%.02lf %s", double_bytes, suffix[i]);
  return output;
}

int main(int argc, char **argv)
{
  if (argc == 1)
  {
    fprintf(stderr, "Usage: %s <bytes>\n", *argv);
    return 1;
  }

  uint64_t bytes = atoll(argv[1]);

  printf("%" PRIu64 " Bytes: %s\n", bytes, human_size(bytes));

  return 0;
}
```

## Conclusion

In this tutorial, we learned how to convert a number of bytes to a human readable format with a simple function.

We also learned how to handle command line arguments.